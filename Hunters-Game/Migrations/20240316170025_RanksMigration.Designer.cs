// <auto-generated />
using System;
using Hunters_Game.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hunters_Game.Migrations
{
    [DbContext(typeof(HunterDbContext))]
    [Migration("20240316170025_RanksMigration")]
    partial class RanksMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hunters_Game.Models.Academies.Academy", b =>
                {
                    b.Property<int>("AcademyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictAcademyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalKnowledge")
                        .HasColumnType("int");

                    b.HasKey("AcademyId");

                    b.HasIndex("DistrictAcademyId");

                    b.ToTable("Academies");

                    b.HasData(
                        new
                        {
                            AcademyId = 1,
                            Description = "Академия была построена в условиях бушующей популяции и коэффициента, а также в условиях холодного климата на долгое время в одной части и теплого в другой. Этот климатический стык обусловил глубокий интерес местных охотников к влиянию климата и территорий на образовавшуюся популяцию. Другие направления академия также стремиться не забрасывать.",
                            DistrictAcademyId = 5,
                            Name = "Руасская академия охоты",
                            TotalKnowledge = 20
                        },
                        new
                        {
                            AcademyId = 2,
                            Description = "Первая академия в ассоциации, наиболее умеренная во всех направлениях, но в то же время наиболее сильная, полная опытнейшими и могущественными охотниками.",
                            DistrictAcademyId = 8,
                            Name = "Международный университет охоты",
                            TotalKnowledge = 65
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Academies.Departments.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HuntersCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Description = "Занимается управлением академией",
                            HuntersCount = 0,
                            Name = "Ректорат",
                            PostName = "Член ректората"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Description = "Департамент расследований - одно из приоритетных направлений в охоте. Занимаются тем, что расследуют заявления населения, выполняют расследования при происшествиях, выполняют поручения департамента хранителей, в случае необходимости",
                            HuntersCount = 0,
                            Name = "Следственный департамент",
                            PostName = "Следователь"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Description = "Сюда попадают охотники после бакалавриата в академии, а также те, кто пока не попал в другие департаменты. Занимаются помощью другим департаментам в случае необходимости.",
                            HuntersCount = 0,
                            Name = "Департамент резерва",
                            PostName = "Охотник резерва"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Description = "Занимается патрулированием населённых пунктов, защитными и атакующими военными действиями, обеспечением порядка, подключением к устранению, задержаний и запечатыванию существ, разведкой территорий и так далее.",
                            HuntersCount = 0,
                            Name = "Военный департамент",
                            PostName = "Военный охотник"
                        },
                        new
                        {
                            DepartmentId = 5,
                            Description = "Биологический департамент - департамент, занимается исследованием существ, сбором, изучением и выращиванием трав, изучением климата и так далее",
                            HuntersCount = 0,
                            Name = "Биологический департамент",
                            PostName = "Биолог"
                        },
                        new
                        {
                            DepartmentId = 6,
                            Description = "Инженерный департамент занимается производством, хранением, обслуживанием, проектированием технической части, а также выступает поддержкой во время операций",
                            HuntersCount = 0,
                            Name = "Инженерный департамент",
                            PostName = "Инженер"
                        },
                        new
                        {
                            DepartmentId = 7,
                            Description = "Департамент хранителей - важный департамент, занимающийся внешней и внутренней разведкой, тайными операциями, переговорами с высшими существами",
                            HuntersCount = 0,
                            Name = "Департамент хранителей",
                            PostName = "Хранитель"
                        },
                        new
                        {
                            DepartmentId = 8,
                            Description = "Департамент магии занимается изучением магии, артефактов, борется с магами. Магия требует большой силы воли, так как сводит с ума",
                            HuntersCount = 0,
                            Name = "Департамент магии",
                            PostName = "Охотник магического департамента"
                        },
                        new
                        {
                            DepartmentId = 9,
                            Description = "Медицинский департамент - департамент, занимающийся лечением пострадавших охотников и оказыванием медицинской поддержки во время операций",
                            HuntersCount = 0,
                            Name = "Медицинский департамент",
                            PostName = "Медик"
                        },
                        new
                        {
                            DepartmentId = 10,
                            Description = "Департамент искателей занимается поиском магических артефактов и их исследованием",
                            HuntersCount = 0,
                            Name = "Департамент искателей",
                            PostName = "Хранитель"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Character");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Creature", b =>
                {
                    b.Property<int>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatureId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CreatureId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Западная область центральной территории Юграс. Проходит по границе с Изомаром",
                            Name = "Гранд",
                            TerritoryId = 1
                        },
                        new
                        {
                            AreaId = 2,
                            DangerRatio = 0,
                            Desctription = "Самая крупная область Юграса, находящаяся по центру и граничащая с рекой Акера. Температура средняя, но холоднее, чем в области Гранд.",
                            Name = "Оскар",
                            TerritoryId = 1
                        },
                        new
                        {
                            AreaId = 3,
                            DangerRatio = 0,
                            Desctription = "Прибрежная часть Ароса и Тиаленда, представляющая собой один из \"краёв\" мира. Коробали там не ходят, разве что теплоходы на экскурсию, зато это очень распространённое место для отдыха туристов.",
                            Name = "Зиквейль",
                            TerritoryId = 5
                        },
                        new
                        {
                            AreaId = 4,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Изомара.",
                            Name = "Платор",
                            TerritoryId = 2
                        },
                        new
                        {
                            AreaId = 5,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Вусла.",
                            Name = "Гилнорт",
                            TerritoryId = 3
                        },
                        new
                        {
                            AreaId = 6,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Сириба",
                            Name = "Накра",
                            TerritoryId = 4
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("AreaId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Город, представляющий собой большое равнинное поле, которое изредка разбавляют дома, промышленные здания, магазины и стадион",
                            Name = "Ган"
                        },
                        new
                        {
                            CityId = 2,
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Город, представляющий собой равнинную местность, обрамлённую горами с юга.",
                            Name = "Мерра"
                        },
                        new
                        {
                            CityId = 3,
                            AreaId = 2,
                            DangerRatio = 0,
                            Desctription = "Город, в котором находится академия. На въезде и выезде постоянные пробки из-за центрального расположения города, являющегося воротами в северную часть Руаса, единственно контролируемую Руасской Академией Охоты. Столица Оскара и Юграса",
                            Name = "Плея"
                        },
                        new
                        {
                            CityId = 4,
                            AreaId = 3,
                            DangerRatio = 0,
                            Desctription = "Город, породивший ассоциацию и первую академию охоты. Достаточно безопасная часть суши, охраняемая горами и реками, ведущими к Великому морю",
                            Name = "Аксель"
                        },
                        new
                        {
                            CityId = 5,
                            AreaId = 4,
                            DangerRatio = 0,
                            Desctription = "Город области Платор в Изомаре, полный талантливых и творческих людей. Отсюда вышло множество звёзд и артистов.",
                            Name = "Финея"
                        },
                        new
                        {
                            CityId = 6,
                            AreaId = 5,
                            DangerRatio = 0,
                            Desctription = "Город области Гилнорт в Вусле, где климат достаточно разнообразен. Зимой там чрезвычайно холодно, а летом население терпит сильнейшую жару. Из-за этого у его жителей хорошая акклиматизация и сильный иммунитет.",
                            Name = "Рона"
                        },
                        new
                        {
                            CityId = 7,
                            AreaId = 6,
                            DangerRatio = 0,
                            Desctription = "Город области Накра в Сирибе, где население терпит сильнейшие морозы, банды мародёров, гигантов и вампиров.",
                            Name = "Сноуден"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("AcademyResponsibleId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("AcademyResponsibleId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            AcademyResponsibleId = 1,
                            CityId = 2,
                            DangerRatio = 5,
                            Desctription = "Наиболее равнинная часть Мерры",
                            Name = "Северная Мерра"
                        },
                        new
                        {
                            DistrictId = 2,
                            AcademyResponsibleId = 1,
                            CityId = 2,
                            DangerRatio = 5,
                            Desctription = "Наиболее гористая часть Мерры",
                            Name = "Южная Мерра"
                        },
                        new
                        {
                            DistrictId = 3,
                            AcademyResponsibleId = 1,
                            CityId = 1,
                            DangerRatio = 5,
                            Desctription = "Ветренное поле, изредка разбавленное домами и промышленными зданиями. Немного разнообразия добавляет футбольный стадион",
                            Name = "Северный Ган"
                        },
                        new
                        {
                            DistrictId = 4,
                            AcademyResponsibleId = 1,
                            CityId = 1,
                            DangerRatio = 5,
                            Desctription = "Ветренное поле, изредка разбавленное домами и промышленными зданиями",
                            Name = "Южный Ган"
                        },
                        new
                        {
                            DistrictId = 5,
                            AcademyResponsibleId = 1,
                            CityId = 3,
                            DangerRatio = 5,
                            Desctription = "Часть города Плея, которая неимоверно загружена пробками, в том числе и потому, что там расположена Академия и большинство административных зданий",
                            Name = "Северная Плея"
                        },
                        new
                        {
                            DistrictId = 6,
                            AcademyResponsibleId = 1,
                            CityId = 3,
                            DangerRatio = 5,
                            Desctription = "Граничащая с областью Марка, представляет собой менее развитую часть города. При этом она менее нагружена.",
                            Name = "Южная Плея"
                        },
                        new
                        {
                            DistrictId = 7,
                            AcademyResponsibleId = 2,
                            CityId = 4,
                            DangerRatio = 0,
                            Desctription = "Торговая и промышленная часть города.",
                            Name = "Северный Аксель"
                        },
                        new
                        {
                            DistrictId = 8,
                            AcademyResponsibleId = 2,
                            CityId = 4,
                            DangerRatio = 0,
                            Desctription = "Административная часть города, в которой находится Первая академия охоты.",
                            Name = "Южный Аксель"
                        },
                        new
                        {
                            DistrictId = 9,
                            AcademyResponsibleId = 1,
                            CityId = 5,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Финея",
                            Name = "Северная Финея"
                        },
                        new
                        {
                            DistrictId = 10,
                            AcademyResponsibleId = 1,
                            CityId = 5,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Финея",
                            Name = "Южная Финея"
                        },
                        new
                        {
                            DistrictId = 11,
                            AcademyResponsibleId = 1,
                            CityId = 6,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Рона",
                            Name = "Северная Рона"
                        },
                        new
                        {
                            DistrictId = 12,
                            AcademyResponsibleId = 1,
                            CityId = 6,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Рона",
                            Name = "Южная Рона"
                        },
                        new
                        {
                            DistrictId = 13,
                            AcademyResponsibleId = 1,
                            CityId = 7,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Сноуден",
                            Name = "Северный Сноуден"
                        },
                        new
                        {
                            DistrictId = 14,
                            AcademyResponsibleId = 1,
                            CityId = 7,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Сноуден",
                            Name = "Южный Сноуден"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesBoolean", b =>
                {
                    b.Property<int>("PropertiesBooleanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesBooleanId"));

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("isPresent")
                        .HasColumnType("bit");

                    b.HasKey("PropertiesBooleanId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesBooleans");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesCount", b =>
                {
                    b.Property<int>("PropertiesCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesCountId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PropertiesCountId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesCounts");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesDescription", b =>
                {
                    b.Property<int>("PropertiesDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesDescriptionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PropertiesDescriptionId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesDescriptions");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            DangerRatio = 0,
                            Desctription = "Тиаленд - крупнейший регион, послуживший началом ассоциации охотников, первой академии охоты. Является наиболее оснащённым в плане охоты, так как собирает в себе самых опытных и способных охотников. Сам регион очень богат различными ресурсами, самый безопасный из всех из-за огромного бюджета, вкладываемого в безопасность (большинство представителей Совета Ассоциации представляют этот регион). Достаточно много магической энергии находится в Тиаленде, что наделяет охотников в этом регионе прекрасным потенциалом в деле развития магии и артефактов.",
                            Name = "Тиаленд"
                        },
                        new
                        {
                            RegionId = 2,
                            DangerRatio = 0,
                            Desctription = "Руас - обширнейший регион, где обитатель может встретить как снежные пустыни в одной части, так и жаркие оазисы на другой. Северная сторона походит на полуостров, с трёх сторон, омываемая морем иэта часть самая морозная из всех. Южное же направление переходит от умеренного климата к тёплым районам. Богат Руас на природные искапаемые как классической, так и сверхъестественной природы. Проходит по центру лишь одна крупная река Акера (входит в тройку крупнейших), соединяющая два моря с двух сторон, из тех, что контролируют из Руасской Академии Охоты. Другие же контролирует Гомранская Академя Охоты. Через неё можно войти в море региона Тонг. Остальные водоёмы весьма мелки и на них не проходят пути сообщения между областями региона, а также охота.",
                            Name = "Руас"
                        },
                        new
                        {
                            RegionId = 3,
                            DangerRatio = 0,
                            Desctription = "Лорас - наименее безопасный регион, окружённый огромными речными путями. Оттого там высоко развита морская охота. В то же время низкая безопасность обусловлена нашествием демонов в этот регион, которое разрушило множество городов, охотников и усложнило охоту. Однако постепенно, помощь со стороны Ассоциации помогает справиться с этой напастью. Ранее это был один из самых процветающих регионов, но с нынешними темпами развития, если удастся наладить безопасность, ему под силу восстановиться достаточно скоро.",
                            Name = "Лорас"
                        },
                        new
                        {
                            RegionId = 4,
                            DangerRatio = 0,
                            Desctription = "Тонг - азиатская часть континента. Много лесов, болотистых земель, вулканов, периодически извергающихся. Две академии, расположенный в этом регионе наиболее молодые, что делает безопасность региона не самой большой. Но в то же время, разнообразие флоры и фауны, создаёт богатые возможности для развития академий и охоты на этой территории.",
                            Name = "Тонг"
                        },
                        new
                        {
                            RegionId = 5,
                            DangerRatio = 0,
                            Desctription = "На неизведанные земли нога разумного человека не ступит на данном этапе. Но цель каждой академии и ассоциаиции достичь уровня, чтобы навести порядок у себя в регионах, а после совершить экспансию в эти земли полные опасностей, опасных биомов и могущественных существ полубожественного уровня.",
                            Name = "Неизведанные земли"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerritoryId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("TerritoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");

                    b.HasData(
                        new
                        {
                            TerritoryId = 1,
                            DangerRatio = 0,
                            Desctription = "Территория в центре Юга, подконтрольного Руасской Академией Охоты, с умеренным климатом. Через её западную часть течёт величественная Акера. Регион максимально развитый, он является столицей Южной столицей региона. Все торговые пути пересекаются здесь, что аккумулирует развитие территории. В одной из областей Оскар, в городе Плея, расположилась Руасская Академия Охоты, готовая принять в свои ряды кандидатов в герои. Территория максимально урбанизирована и специализируется на торговле, производстве и услугах. Богата на элементалей.",
                            Name = "Юграс",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 2,
                            DangerRatio = 0,
                            Desctription = "Самая тёплая территория в Руасе в южной его части. Границы территории проходят по морскому побережью, что сосредотачивает большинство морских охотников Руасской академии охоты на этой территории. Богата демонами",
                            Name = "Изомар",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 3,
                            DangerRatio = 0,
                            Desctription = "Прохладный регион, проходящий посредником между севером и югом Руаса. Богата вампирами",
                            Name = "Вусл",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 4,
                            DangerRatio = 0,
                            Desctription = "Морозный край, заполненный озлобленным местным населением, снежной пустыней, гигантами, вампирами и магами холода",
                            Name = "Сириб",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 5,
                            DangerRatio = 0,
                            Desctription = "Северо-западная территория часть величайшего региона, с которого началась история ассоциации",
                            Name = "Арос",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailId");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicDegreeId"));

                    b.Property<int>("AcademicDegreeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicDegreeId");

                    b.ToTable("AcademicDegrees");

                    b.HasData(
                        new
                        {
                            AcademicDegreeId = 1,
                            AcademicDegreeType = 0,
                            Description = "Охотник, написавший и защитивший кандидатскую диссертацию по определённой области",
                            Name = "Кандидат"
                        },
                        new
                        {
                            AcademicDegreeId = 2,
                            AcademicDegreeType = 1,
                            Description = "Охотник, написавший и защитивший докторскую диссертацию по определённой области",
                            Name = "Доктор"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.AcademicRank", b =>
                {
                    b.Property<int>("AcademicRankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicRankId"));

                    b.Property<int>("AcademicRankType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicRankId");

                    b.ToTable("AcademicRanks");

                    b.HasData(
                        new
                        {
                            AcademicRankId = 1,
                            AcademicRankType = 0,
                            Description = "Охотник, который занимается научной деятельностью. Может преподавать в зависимости от своей степени теоретической подготовленности. Магистр может преподавать бакалавриат, аспирант - магистратуру",
                            Name = "Научный сотрудник"
                        },
                        new
                        {
                            AcademicRankId = 2,
                            AcademicRankType = 1,
                            Description = "Научный сотрудник, имеющий хотя бы одну защищённую кандидатскую степень, который провёл не менее 15 научных изысканий. Он может обучать в академии на бакалавров, магистров и аспирантов, на общие специализации, а также быть помощником в написании кандидатской диссертации для других соискателей",
                            Name = "Доцент"
                        },
                        new
                        {
                            AcademicRankId = 3,
                            AcademicRankType = 0,
                            Description = "Научный сотрудник, имеющий хотя бы одну защищённую докторскую степень, который провёл не менее 30 научных изысканийй. Он может обучать на все степени теоретической подготовленности, на общие и продвинутые специализации, в зависимости от своих знаний. Также он может быть помощиником в написании докторской диссертации для других соискателей.",
                            Name = "Профессор"
                        },
                        new
                        {
                            AcademicRankId = 4,
                            AcademicRankType = 0,
                            Description = "Научный сотрудник, имеющий более 3 диссертаций, который провёл не менее 60 научных изысканий. Он может обучать всему, в том числе на элитные специализации. Руководит научными департаментами и выступает членом, магистром или главой совета ассоциации.",
                            Name = "Академик"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            Description = "Как правило, это охотники, недавно выпустившиеся из академии и проходящие стажировку. Им следует давать самые лёгкие задачи (E), шанс на печальные последствия от которых минимальны. Так же им необходимо кураторство более опытных охотников, чтобы эффективность их работы была более-менее положительна. Он может занимать должность не выше младшего охотника. Эквивалентно рядовому-ефрейтору в зависимости от опыта и личных качеств.",
                            LevelType = 0,
                            Name = "Новичок"
                        },
                        new
                        {
                            LevelId = 2,
                            Description = "Этот охотник прошёл этап стажировки и уже способен выполнять более сложные задачи (E, D) под руководством своего начальства. Растёт он благодаря опыту, системе обучения от департамента и академии, а также благодаря выбранному куратору - охотнику с уровнем не ниже мастера.Он может занимать должность младший охотник или охотник специалист, в зависимости от ранга. Эквивалентно мл.сержанту-старшине в зависимости от ранга.",
                            LevelType = 1,
                            Name = "Подмастерье"
                        },
                        new
                        {
                            LevelId = 3,
                            Description = "Охотник, который получил уровень специалиста, уже способен выполнять лёгкие задачи повышенной сложности (D) самостоятельно. Может иметь должность охотник-специалист. Эквивалентно мл.лейтенанту-ст.лейтенанту в зависимости от ранга.",
                            LevelType = 2,
                            Name = "Специалист"
                        },
                        new
                        {
                            LevelId = 4,
                            Description = "Достаточно опытный охотник, способный браться за задачи средней сложности (C, B) самостоятельно в качестве лидера группы и успешно привести её к успеху. Может занимать должность охотник-специалист или старший охотник, в зависимости от ранга. Во втором случае способен возглавлять управление по областям. Эквивалентно капитану-майору в зависимости от ранга.",
                            LevelType = 3,
                            Name = "Эксперт"
                        },
                        new
                        {
                            LevelId = 5,
                            Description = "Высококлассный охотник, способный возглавлять большие группы и даже подразделения департамента, отвечающие за территории, разумеется в зависимости от ранга. От этого же зависит на какую должность может претендовать мастер - старший охотник или главный охотник. Становится куратором для подмастерий. Берутся за сложные задания (A). Эквивалентно подполковнику-полковнику в зависимости от должности.",
                            LevelType = 4,
                            Name = "Мастер"
                        },
                        new
                        {
                            LevelId = 6,
                            Description = "Наиболее искуссный охотник, которым назначают решение задач особой сложности (S). Карьерный путь охотника такого уровня позволяет ему быть главой департамента в качестве ведущего охотник департамента, члена ректората или ректора,члена совета ассоциации и даже магистра совета, вплоть до главы ассоциации. Эквивалентно генеральским званиям в зависимости от должности.",
                            LevelType = 5,
                            Name = "Грандмастер"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.PostGrade", b =>
                {
                    b.Property<int>("PostGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostGradeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostGradeType")
                        .HasColumnType("int");

                    b.HasKey("PostGradeId");

                    b.ToTable("PostGrades");

                    b.HasData(
                        new
                        {
                            PostGradeId = 1,
                            Description = "Занимается не сложной работой, E и D-заданиями. Редко когда получают ответственные и сложные задачи. Является больше помощником, чем основном охотником-специалистом. Эквивалентно рядовому.",
                            Name = "Младший",
                            PostGradeType = 0
                        },
                        new
                        {
                            PostGradeId = 2,
                            Description = "Более-менее опытный охотник. Может руководить группой, если она сформирована при выполнении D-заданиях. Если охотник способный - может быть назначен лидером при C-задаче. Выполняет основную работу, требующую определённых навыков и подразумевающую риск. Как правило, охотник-специалист, иногда эксперт. Эквивалентно сержантской-лейтенантской должности.",
                            Name = "Специалист",
                            PostGradeType = 1
                        },
                        new
                        {
                            PostGradeId = 3,
                            Description = "Опытный охотник с уровнем не ниже эксперта и рангом не ниже старшего охотника. Может управлять подразделением по области, то есть несколькими группами. Как правило, достаточно сильный боец и управленец, с хорошей базой знаний на определённую тему. Руководит C, B - задачами. Эквивалентно капитанской-майорской должности.",
                            Name = "Старший",
                            PostGradeType = 2
                        },
                        new
                        {
                            PostGradeId = 4,
                            Description = "Глава нескольких подразделения. Обязательно охотник высшей категории. Руководит A-задачами и участвует в S-задачах. Эквивалентно должности подполковника-полковника",
                            Name = "Главный",
                            PostGradeType = 3
                        },
                        new
                        {
                            PostGradeId = 5,
                            Description = "Глава департамента. Как правило, охотник уровня грандмастер, если таковые имеются. Может руководить S-задачами. Эквивалетно генеральской должности.",
                            Name = "Высший",
                            PostGradeType = 4
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RanksType")
                        .HasColumnType("int");

                    b.HasKey("RankId");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            RankId = 1,
                            Description = "Этот ранг обычно носят новички и подмастерья, которые ещё не успели набраться опыта. С таким рангом они могут претендовать лишь на должности младших представителей департамента, занимающихся стажировкой и вспомогательной работой.",
                            Name = "Младший охотник",
                            RanksType = 0
                        },
                        new
                        {
                            RankId = 2,
                            Description = "Ранг охотника могут получить подмастерья и охотники-специалисты, которые имеют стаж охоты более года, выполневших более 15 E-задач и более 10 D-задач. Кроме того, они должны окончить магистратуру в академии. Это даст им право работать на должности охотника-специалиста.",
                            Name = "Охотник",
                            RanksType = 1
                        },
                        new
                        {
                            RankId = 3,
                            Description = "Охотники этого ранга имеют охотники-специалисты и старшие охотники департамента с уровнем эксперт и стажем более 3 лет. Также они должны окончить аспирантуру академии и иметь хотя бы одну специализацию общего типа. Существует требование в успешном участии в 10 C-задачах и 3 B-задачах.",
                            Name = "Старший охотник",
                            RanksType = 2
                        },
                        new
                        {
                            RankId = 4,
                            Description = "Такой ранг позволяет занимать должность старшего, главного и высшего охотника департамента, а также занимать должность в ректорате, совете ассоциации вплоть до её возглавления. В качестве требования к ней - не менее 7 лет стажа в охоте, учёная степень, 3 специализации общего типа и одна специализация продвинутого типа. В качестве других требований - успешное участие в 10 B-задачах и 5 A-задачах.",
                            Name = "Охотник высшей категории",
                            RanksType = 0
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("Statuts");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Охотник не успел получить статус.",
                            Name = "Без статуса",
                            StatusType = 0
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Охотник со стажем больше пяти лет и рейтингом выше 3.5",
                            Name = "Отличный охотник",
                            StatusType = 1
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Охотник со стажем больше десяти лет и рейтингом выше 3.75",
                            Name = "Охотник-ветеран",
                            StatusType = 2
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "Охотник со стажем больше 15 лет и рейтингом выше 4",
                            Name = "Охотник международного класса",
                            StatusType = 3
                        },
                        new
                        {
                            StatusId = 5,
                            Description = "Охотник со стажем больше 20 лет и рейтингом выше 4.25",
                            Name = "Легендарный охотник",
                            StatusType = 4
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Ranks.TheoryDegree", b =>
                {
                    b.Property<int>("TheoryDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheoryDegreeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TheoryType")
                        .HasColumnType("int");

                    b.HasKey("TheoryDegreeId");

                    b.ToTable("TheoryDegrees");

                    b.HasData(
                        new
                        {
                            TheoryDegreeId = 1,
                            Description = "Охотник, учащийся в академии наук, но ещё не окончивший её.",
                            Name = "Абитуриент",
                            TheoryType = 0
                        },
                        new
                        {
                            TheoryDegreeId = 2,
                            Description = "Охотник, выпустившийся из академии. Имеет право на стажировку в каком-либо департаменте на должности младшего охотника департамента.",
                            Name = "Бакалавр",
                            TheoryType = 1
                        },
                        new
                        {
                            TheoryDegreeId = 3,
                            Description = "Охотник, получивший 3 степень теоретической подготовленности - магистр. При выполнении других требований открывается доступ к должности охотника-специалиста департамента из-за прохождения более глубокого курса охотничьей деятельности.",
                            Name = "Магистр",
                            TheoryType = 2
                        },
                        new
                        {
                            TheoryDegreeId = 4,
                            Description = "Охотник, получивший 4 степень теоретической подготовленности - аспирант. При выполнении других требований открывается доступ к должности старший охотник департамента, прохождения курса об управлении подразделениями.",
                            Name = "Аспирант",
                            TheoryType = 0
                        },
                        new
                        {
                            TheoryDegreeId = 5,
                            Description = "Охотник, получивший 5 степень теоретической подготовленности - учёный. Он написал и защитил хотя бы одну кандидатскую диссертацию. При выполнении других требований может занять должность главного охотника департамента, так как обладает большим объёмом знаний в определённой области.",
                            Name = "Учёный",
                            TheoryType = 4
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Stat.CharacterStat", b =>
                {
                    b.Property<int>("CharacterStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterStatId"));

                    b.Property<int>("Acuracy")
                        .HasColumnType("int");

                    b.Property<int>("Attentivines")
                        .HasColumnType("int");

                    b.Property<int>("Brave")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Fortuna")
                        .HasColumnType("int");

                    b.Property<int>("GeneralKnowledge")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Intellegence")
                        .HasColumnType("int");

                    b.Property<int>("Leadership")
                        .HasColumnType("int");

                    b.Property<int>("MagicEnegyControl")
                        .HasColumnType("int");

                    b.Property<int>("MagicEnergy")
                        .HasColumnType("int");

                    b.Property<int>("Memory")
                        .HasColumnType("int");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<int>("SpeedAttack")
                        .HasColumnType("int");

                    b.Property<int>("SpeedMove")
                        .HasColumnType("int");

                    b.Property<int>("SpeedThinking")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalSkill")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalSkill")
                        .HasColumnType("int");

                    b.Property<int>("WillPower")
                        .HasColumnType("int");

                    b.HasKey("CharacterStatId");

                    b.ToTable("Stats");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CharacterStat");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Hunter", b =>
                {
                    b.HasBaseType("Hunters_Game.Models.Characters.Character");

                    b.Property<int>("AcademicDegreeId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicRankId")
                        .HasColumnType("int");

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DisсtrictId")
                        .HasColumnType("int");

                    b.Property<int>("HunterStatsId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("PostGradeId")
                        .HasColumnType("int");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartHunt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<int>("TheoryDegreeId")
                        .HasColumnType("int");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("AcademicRankId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DisсtrictId");

                    b.HasIndex("HunterStatsId")
                        .IsUnique()
                        .HasFilter("[HunterStatsId] IS NOT NULL");

                    b.HasIndex("LevelId");

                    b.HasIndex("PostGradeId");

                    b.HasIndex("RankId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("TheoryDegreeId");

                    b.HasDiscriminator().HasValue("Hunter");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Activity = "Охотник",
                            Age = 40,
                            Birthday = new DateTime(1984, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Джеймс",
                            Gender = true,
                            MiddleName = "Джуниор",
                            SecondName = "Адамс",
                            Type = "Человек",
                            AcademicDegreeId = 2,
                            AcademicRankId = 3,
                            AcademyId = 1,
                            AreaId = 3,
                            CityId = 4,
                            CurrentLocationId = 5,
                            DepartmentId = 1,
                            DisсtrictId = 7,
                            HunterStatsId = 1,
                            LevelId = 6,
                            PostGradeId = 5,
                            RankId = 4,
                            Rate = 4.34f,
                            RegionId = 1,
                            Stage = 11,
                            StartHunt = new DateTime(2014, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 3,
                            TerritoryId = 5,
                            TheoryDegreeId = 5
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Stat.HunterStat", b =>
                {
                    b.HasBaseType("Hunters_Game.Models.Stat.CharacterStat");

                    b.Property<int>("HunterId")
                        .HasColumnType("int");

                    b.Property<int>("HunterKnowledge")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("HunterStat");

                    b.HasData(
                        new
                        {
                            CharacterStatId = 1,
                            Acuracy = 67,
                            Attentivines = 62,
                            Brave = 76,
                            Charisma = 64,
                            Endurance = 56,
                            Fortuna = 76,
                            GeneralKnowledge = 68,
                            Health = 86,
                            Intellegence = 89,
                            Leadership = 62,
                            MagicEnegyControl = 75,
                            MagicEnergy = 76,
                            Memory = 66,
                            Reaction = 62,
                            SpeedAttack = 68,
                            SpeedMove = 65,
                            SpeedThinking = 75,
                            Strength = 76,
                            SurvivalSkill = 84,
                            TechnicalSkill = 94,
                            WillPower = 75,
                            HunterId = 1,
                            HunterKnowledge = 94
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Academies.Academy", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "DistrictAcademy")
                        .WithMany()
                        .HasForeignKey("DistrictAcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistrictAcademy");
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Creature", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Area", null)
                        .WithMany("Creatures")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", null)
                        .WithMany("Creatures")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", null)
                        .WithMany("Creatures")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Region", null)
                        .WithMany("Creatures")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Territory", null)
                        .WithMany("Creatures")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.HasOne("Hunters_Game.Models.Academies.Academy", "AcademyResponsible")
                        .WithMany()
                        .HasForeignKey("AcademyResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyResponsible");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesBoolean", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesCount", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesDescription", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Hunter", b =>
                {
                    b.HasOne("Hunters_Game.Models.Ranks.AcademicDegree", "AcademicDegree")
                        .WithMany()
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.AcademicRank", "AcademicRank")
                        .WithMany()
                        .HasForeignKey("AcademicRankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Academies.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Academies.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", "Disсtrict")
                        .WithMany()
                        .HasForeignKey("DisсtrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Stat.HunterStat", "HunterStats")
                        .WithOne()
                        .HasForeignKey("Hunters_Game.Models.Characters.Hunter", "HunterStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.PostGrade", "PostGrade")
                        .WithMany()
                        .HasForeignKey("PostGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Ranks.TheoryDegree", "TheoryDegree")
                        .WithMany()
                        .HasForeignKey("TheoryDegreeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicDegree");

                    b.Navigation("AcademicRank");

                    b.Navigation("Academy");

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Department");

                    b.Navigation("Disсtrict");

                    b.Navigation("HunterStats");

                    b.Navigation("Level");

                    b.Navigation("PostGrade");

                    b.Navigation("Rank");

                    b.Navigation("Region");

                    b.Navigation("Status");

                    b.Navigation("Territory");

                    b.Navigation("TheoryDegree");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Region", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.Navigation("Creatures");
                });
#pragma warning restore 612, 618
        }
    }
}
