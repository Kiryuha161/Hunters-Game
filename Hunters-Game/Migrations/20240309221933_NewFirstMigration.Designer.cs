// <auto-generated />
using System;
using Hunters_Game.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hunters_Game.Migrations
{
    [DbContext(typeof(HunterDbContext))]
    [Migration("20240309221933_NewFirstMigration")]
    partial class NewFirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hunters_Game.Models.Academies.Academy", b =>
                {
                    b.Property<int>("AcademyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictAcademyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalKnowledge")
                        .HasColumnType("int");

                    b.HasKey("AcademyId");

                    b.HasIndex("DistrictAcademyId");

                    b.ToTable("Academies");

                    b.HasData(
                        new
                        {
                            AcademyId = 1,
                            Description = "Академия была построена в условиях бушующей популяции и коэффициента, а также в условиях холодного климата на долгое время в одной части и теплого в другой. Этот климатический стык обусловил глубокий интерес местных охотников к влиянию климата и территорий на образовавшуюся популяцию. Другие направления академия также стремиться не забрасывать.",
                            DistrictAcademyId = 5,
                            Name = "Руасская академия охоты",
                            TotalKnowledge = 20
                        },
                        new
                        {
                            AcademyId = 2,
                            Description = "Первая академия в ассоциации, наиболее умеренная во всех направлениях, но в то же время наиболее сильная, полная опытнейшими и могущественными охотниками.",
                            DistrictAcademyId = 8,
                            Name = "Международный университет охоты",
                            TotalKnowledge = 65
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Academies.Departments.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HuntersCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Description = "Занимается управлением академией",
                            HuntersCount = 0,
                            Name = "Ректорат"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Description = "Занимается расследованием различных дел по заявкам от жителей региона",
                            HuntersCount = 0,
                            Name = "Следственный департамент"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Description = "Сюда попадают охотники после бакалавриата в академии, а также те, кто пока не попал в другие департаменты. Занимаются помощью другим департаментам в случае необходимости.",
                            HuntersCount = 0,
                            Name = "Департамент резерва"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Character");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Creature", b =>
                {
                    b.Property<int>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatureId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CreatureId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Западная область центральной территории Юграс. Проходит по границе с Изомаром",
                            Name = "Гранд",
                            TerritoryId = 1
                        },
                        new
                        {
                            AreaId = 2,
                            DangerRatio = 0,
                            Desctription = "Самая крупная область Юграса, находящаяся по центру и граничащая с рекой Акера. Температура средняя, но холоднее, чем в области Гранд.",
                            Name = "Оскар",
                            TerritoryId = 1
                        },
                        new
                        {
                            AreaId = 3,
                            DangerRatio = 0,
                            Desctription = "Прибрежная часть Ароса и Тиаленда, представляющая собой один из \"краёв\" мира. Коробали там не ходят, разве что теплоходы на экскурсию, зато это очень распространённое место для отдыха туристов.",
                            Name = "Зиквейль",
                            TerritoryId = 5
                        },
                        new
                        {
                            AreaId = 4,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Изомара.",
                            Name = "Платор",
                            TerritoryId = 2
                        },
                        new
                        {
                            AreaId = 5,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Вусла.",
                            Name = "Гилнорт",
                            TerritoryId = 3
                        },
                        new
                        {
                            AreaId = 6,
                            DangerRatio = 0,
                            Desctription = "Одна из областей Сириба",
                            Name = "Накра",
                            TerritoryId = 4
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("AreaId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Город, представляющий собой большое равнинное поле, которое изредка разбавляют дома, промышленные здания, магазины и стадион",
                            Name = "Ган"
                        },
                        new
                        {
                            CityId = 2,
                            AreaId = 1,
                            DangerRatio = 0,
                            Desctription = "Город, представляющий собой равнинную местность, обрамлённую горами с юга.",
                            Name = "Мерра"
                        },
                        new
                        {
                            CityId = 3,
                            AreaId = 2,
                            DangerRatio = 0,
                            Desctription = "Город, в котором находится академия. На въезде и выезде постоянные пробки из-за центрального расположения города, являющегося воротами в северную часть Руаса, единственно контролируемую Руасской Академией Охоты. Столица Оскара и Юграса",
                            Name = "Плея"
                        },
                        new
                        {
                            CityId = 4,
                            AreaId = 3,
                            DangerRatio = 0,
                            Desctription = "Город, породивший ассоциацию и первую академию охоты. Достаточно безопасная часть суши, охраняемая горами и реками, ведущими к Великому морю",
                            Name = "Аксель"
                        },
                        new
                        {
                            CityId = 5,
                            AreaId = 4,
                            DangerRatio = 0,
                            Desctription = "Город области Платор в Изомаре, полный талантливых и творческих людей. Отсюда вышло множество звёзд и артистов.",
                            Name = "Финея"
                        },
                        new
                        {
                            CityId = 6,
                            AreaId = 5,
                            DangerRatio = 0,
                            Desctription = "Город области Гилнорт в Вусле, где климат достаточно разнообразен. Зимой там чрезвычайно холодно, а летом население терпит сильнейшую жару. Из-за этого у его жителей хорошая акклиматизация и сильный иммунитет.",
                            Name = "Рона"
                        },
                        new
                        {
                            CityId = 7,
                            AreaId = 6,
                            DangerRatio = 0,
                            Desctription = "Город области Накра в Сирибе, где население терпит сильнейшие морозы, банды мародёров, гигантов и вампиров.",
                            Name = "Сноуден"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("AcademyResponsibleId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("AcademyResponsibleId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            AcademyResponsibleId = 1,
                            CityId = 2,
                            DangerRatio = 8,
                            Desctription = "Наиболее равнинная часть Мерры",
                            Name = "Северная Мерра"
                        },
                        new
                        {
                            DistrictId = 2,
                            AcademyResponsibleId = 1,
                            CityId = 2,
                            DangerRatio = 8,
                            Desctription = "Наиболее гористая часть Мерры",
                            Name = "Южная Мерра"
                        },
                        new
                        {
                            DistrictId = 3,
                            AcademyResponsibleId = 1,
                            CityId = 1,
                            DangerRatio = 8,
                            Desctription = "Ветренное поле, изредка разбавленное домами и промышленными зданиями. Немного разнообразия добавляет футбольный стадион",
                            Name = "Северный Ган"
                        },
                        new
                        {
                            DistrictId = 4,
                            AcademyResponsibleId = 1,
                            CityId = 1,
                            DangerRatio = 8,
                            Desctription = "Ветренное поле, изредка разбавленное домами и промышленными зданиями",
                            Name = "Южный Ган"
                        },
                        new
                        {
                            DistrictId = 5,
                            AcademyResponsibleId = 1,
                            CityId = 3,
                            DangerRatio = 8,
                            Desctription = "Часть города Плея, которая неимоверно загружена пробками, в том числе и потому, что там расположена Академия и большинство административных зданий",
                            Name = "Северная Плея"
                        },
                        new
                        {
                            DistrictId = 6,
                            AcademyResponsibleId = 1,
                            CityId = 3,
                            DangerRatio = 8,
                            Desctription = "Граничащая с областью Марка, представляет собой менее развитую часть города. При этом она менее нагружена.",
                            Name = "Южная Плея"
                        },
                        new
                        {
                            DistrictId = 7,
                            AcademyResponsibleId = 2,
                            CityId = 4,
                            DangerRatio = 0,
                            Desctription = "Торговая и промышленная часть города.",
                            Name = "Северный Аксель"
                        },
                        new
                        {
                            DistrictId = 8,
                            AcademyResponsibleId = 2,
                            CityId = 4,
                            DangerRatio = 0,
                            Desctription = "Административная часть города, в которой находится Первая академия охоты.",
                            Name = "Южный Аксель"
                        },
                        new
                        {
                            DistrictId = 9,
                            AcademyResponsibleId = 1,
                            CityId = 5,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Финея",
                            Name = "Северная Финея"
                        },
                        new
                        {
                            DistrictId = 10,
                            AcademyResponsibleId = 1,
                            CityId = 5,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Финея",
                            Name = "Южная Финея"
                        },
                        new
                        {
                            DistrictId = 11,
                            AcademyResponsibleId = 1,
                            CityId = 6,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Рона",
                            Name = "Северная Рона"
                        },
                        new
                        {
                            DistrictId = 12,
                            AcademyResponsibleId = 1,
                            CityId = 6,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Рона",
                            Name = "Южная Рона"
                        },
                        new
                        {
                            DistrictId = 13,
                            AcademyResponsibleId = 1,
                            CityId = 7,
                            DangerRatio = 0,
                            Desctription = "Северная часть города Сноуден",
                            Name = "Северный Сноуден"
                        },
                        new
                        {
                            DistrictId = 14,
                            AcademyResponsibleId = 1,
                            CityId = 7,
                            DangerRatio = 0,
                            Desctription = "Южная часть города Сноуден",
                            Name = "Южный Сноуден"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesBoolean", b =>
                {
                    b.Property<int>("PropertiesBooleanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesBooleanId"));

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("isPresent")
                        .HasColumnType("bit");

                    b.HasKey("PropertiesBooleanId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesBooleans");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesCount", b =>
                {
                    b.Property<int>("PropertiesCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesCountId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PropertiesCountId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesCounts");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesDescription", b =>
                {
                    b.Property<int>("PropertiesDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesDescriptionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Districtid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PropertiesDescriptionId");

                    b.HasIndex("Districtid");

                    b.ToTable("EnvironmentPropertiesDescriptions");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            DangerRatio = 0,
                            Desctription = "Тиаленд - крупнейший регион, послуживший началом ассоциации охотников, первой академии охоты. Является наиболее оснащённым в плане охоты, так как собирает в себе самых опытных и способных охотников. Сам регион очень богат различными ресурсами, самый безопасный из всех из-за огромного бюджета, вкладываемого в безопасность (большинство представителей Совета Ассоциации представляют этот регион). Достаточно много магической энергии находится в Тиаленде, что наделяет охотников в этом регионе прекрасным потенциалом в деле развития магии и артефактов.",
                            Name = "Тиаленд"
                        },
                        new
                        {
                            RegionId = 2,
                            DangerRatio = 0,
                            Desctription = "Руас - обширнейший регион, где обитатель может встретить как снежные пустыни в одной части, так и жаркие оазисы на другой. Северная сторона походит на полуостров, с трёх сторон, омываемая морем иэта часть самая морозная из всех. Южное же направление переходит от умеренного климата к тёплым районам. Богат Руас на природные искапаемые как классической, так и сверхъестественной природы. Проходит по центру лишь одна крупная река Акера (входит в тройку крупнейших), соединяющая два моря с двух сторон, из тех, что контролируют из Руасской Академии Охоты. Другие же контролирует Гомранская Академя Охоты. Через неё можно войти в море региона Тонг. Остальные водоёмы весьма мелки и на них не проходят пути сообщения между областями региона, а также охота.",
                            Name = "Руас"
                        },
                        new
                        {
                            RegionId = 3,
                            DangerRatio = 0,
                            Desctription = "Лорас - наименее безопасный регион, окружённый огромными речными путями. Оттого там высоко развита морская охота. В то же время низкая безопасность обусловлена нашествием демонов в этот регион, которое разрушило множество городов, охотников и усложнило охоту. Однако постепенно, помощь со стороны Ассоциации помогает справиться с этой напастью. Ранее это был один из самых процветающих регионов, но с нынешними темпами развития, если удастся наладить безопасность, ему под силу восстановиться достаточно скоро.",
                            Name = "Лорас"
                        },
                        new
                        {
                            RegionId = 4,
                            DangerRatio = 0,
                            Desctription = "Тонг - азиатская часть континента. Много лесов, болотистых земель, вулканов, периодически извергающихся. Две академии, расположенный в этом регионе наиболее молодые, что делает безопасность региона не самой большой. Но в то же время, разнообразие флоры и фауны, создаёт богатые возможности для развития академий и охоты на этой территории.",
                            Name = "Тонг"
                        },
                        new
                        {
                            RegionId = 5,
                            DangerRatio = 0,
                            Desctription = "На неизведанные земли нога разумного человека не ступит на данном этапе. Но цель каждой академии и ассоциаиции достичь уровня, чтобы навести порядок у себя в регионах, а после совершить экспансию в эти земли полные опасностей, опасных биомов и могущественных существ полубожественного уровня.",
                            Name = "Неизведанные земли"
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerritoryId"));

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("DangerRatio")
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("TerritoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");

                    b.HasData(
                        new
                        {
                            TerritoryId = 1,
                            DangerRatio = 0,
                            Desctription = "Территория в центре Юга, подконтрольного Руасской Академией Охоты, с умеренным климатом. Через её западную часть течёт величественная Акера. Регион максимально развитый, он является столицей Южной столицей региона. Все торговые пути пересекаются здесь, что аккумулирует развитие территории. В одной из областей Оскар, в городе Плея, расположилась Руасская Академия Охоты, готовая принять в свои ряды кандидатов в герои. Территория максимально урбанизирована и специализируется на торговле, производстве и услугах. Богата на элементалей.",
                            Name = "Юграс",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 2,
                            DangerRatio = 0,
                            Desctription = "Самая тёплая территория в Руасе в южной его части. Границы территории проходят по морскому побережью, что сосредотачивает большинство морских охотников Руасской академии охоты на этой территории. Богата демонами",
                            Name = "Изомар",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 3,
                            DangerRatio = 0,
                            Desctription = "Прохладный регион, проходящий посредником между севером и югом Руаса. Богата вампирами",
                            Name = "Вусл",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 4,
                            DangerRatio = 0,
                            Desctription = "Морозный край, заполненный озлобленным местным населением, снежной пустыней, гигантами, вампирами и магами холода",
                            Name = "Сириб",
                            RegionId = 2
                        },
                        new
                        {
                            TerritoryId = 5,
                            DangerRatio = 0,
                            Desctription = "Северо-западная территория часть величайшего региона, с которого началась история ассоциации",
                            Name = "Арос",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailId");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("Hunters_Game.Models.Stat.CharacterStat", b =>
                {
                    b.Property<int>("CharacterStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterStatId"));

                    b.Property<int>("Acuracy")
                        .HasColumnType("int");

                    b.Property<int>("Attentivines")
                        .HasColumnType("int");

                    b.Property<int>("Brave")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Fortuna")
                        .HasColumnType("int");

                    b.Property<int>("GeneralKnowledge")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Intellegence")
                        .HasColumnType("int");

                    b.Property<int>("Leadership")
                        .HasColumnType("int");

                    b.Property<int>("MagicEnegyControl")
                        .HasColumnType("int");

                    b.Property<int>("MagicEnergy")
                        .HasColumnType("int");

                    b.Property<int>("Memory")
                        .HasColumnType("int");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<int>("SpeedAttack")
                        .HasColumnType("int");

                    b.Property<int>("SpeedMove")
                        .HasColumnType("int");

                    b.Property<int>("SpeedThinking")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalSkill")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalSkill")
                        .HasColumnType("int");

                    b.Property<int>("WillPower")
                        .HasColumnType("int");

                    b.HasKey("CharacterStatId");

                    b.ToTable("Stats");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CharacterStat");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Hunter", b =>
                {
                    b.HasBaseType("Hunters_Game.Models.Characters.Character");

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DisсtrictId")
                        .HasColumnType("int");

                    b.Property<int>("HunterStatsId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DisсtrictId");

                    b.HasIndex("HunterStatsId")
                        .IsUnique()
                        .HasFilter("[HunterStatsId] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.HasIndex("TerritoryId");

                    b.HasDiscriminator().HasValue("Hunter");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Activity = "Охотник",
                            Age = 40,
                            Birthday = new DateTime(1984, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Джеймс",
                            Gender = true,
                            MiddleName = "Джуниор",
                            SecondName = "Адамс",
                            Type = "Человек",
                            AcademyId = 1,
                            AreaId = 3,
                            CityId = 4,
                            CurrentLocationId = 5,
                            DepartmentId = 1,
                            DisсtrictId = 7,
                            HunterStatsId = 1,
                            RegionId = 1,
                            TerritoryId = 5
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Stat.HunterStat", b =>
                {
                    b.HasBaseType("Hunters_Game.Models.Stat.CharacterStat");

                    b.Property<int>("HunterId")
                        .HasColumnType("int");

                    b.Property<int>("HunterKnowledge")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("HunterStat");

                    b.HasData(
                        new
                        {
                            CharacterStatId = 1,
                            Acuracy = 50,
                            Attentivines = 50,
                            Brave = 50,
                            Charisma = 50,
                            Endurance = 50,
                            Fortuna = 50,
                            GeneralKnowledge = 50,
                            Health = 50,
                            Intellegence = 50,
                            Leadership = 50,
                            MagicEnegyControl = 30,
                            MagicEnergy = 50,
                            Memory = 50,
                            Reaction = 50,
                            SpeedAttack = 50,
                            SpeedMove = 50,
                            SpeedThinking = 50,
                            Strength = 50,
                            SurvivalSkill = 50,
                            TechnicalSkill = 50,
                            WillPower = 50,
                            HunterId = 1,
                            HunterKnowledge = 50
                        });
                });

            modelBuilder.Entity("Hunters_Game.Models.Academies.Academy", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "DistrictAcademy")
                        .WithMany()
                        .HasForeignKey("DistrictAcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistrictAcademy");
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Creature", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Area", null)
                        .WithMany("Creatures")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", null)
                        .WithMany("Creatures")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", null)
                        .WithMany("Creatures")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Region", null)
                        .WithMany("Creatures")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Territory", null)
                        .WithMany("Creatures")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.HasOne("Hunters_Game.Models.Academies.Academy", "AcademyResponsible")
                        .WithMany()
                        .HasForeignKey("AcademyResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyResponsible");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesBoolean", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesCount", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.LocationProperties.EnvironmentPropertiesDescription", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("Districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.HasOne("Hunters_Game.Models.Location.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Hunters_Game.Models.Characters.Hunter", b =>
                {
                    b.HasOne("Hunters_Game.Models.Academies.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Academies.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.District", "Disсtrict")
                        .WithMany()
                        .HasForeignKey("DisсtrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Stat.HunterStat", "HunterStats")
                        .WithOne()
                        .HasForeignKey("Hunters_Game.Models.Characters.Hunter", "HunterStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hunters_Game.Models.Location.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Department");

                    b.Navigation("Disсtrict");

                    b.Navigation("HunterStats");

                    b.Navigation("Region");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Area", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.City", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.District", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Region", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Hunters_Game.Models.Location.Territory", b =>
                {
                    b.Navigation("Creatures");
                });
#pragma warning restore 612, 618
        }
    }
}
